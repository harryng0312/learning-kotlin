<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
    <aop:aspectj-autoproxy/>
    <import resource="db.xml"/>
    <!-- processor aspect -->
    <!--    <bean id="processorOutputResolver" class="com.videabiz.badgechain.aop.ProcessorOutputResolver"/>-->
    <!--    <aop:config>-->
    <!--        <aop:aspect id="aspectProcessorOutputResolver" ref="processorOutputResolver">-->
    <!--            <aop:pointcut id="resolverOutputResultPointcut"-->
    <!--                          expression="execution(public * com.videabiz.badgechain.processor..*.*(..))"/>-->
    <!--            <aop:around method="processOutputResult" pointcut-ref="resolverOutputResultPointcut"/>-->
    <!--        </aop:aspect>-->
    <!--    </aop:config>-->

    <!-- transaction aspect -->
    <!-- aspectj -->
    <!-- the transactional advice (what 'happens'; see the <aop:advisor/> bean below) -->
    <tx:advice id="requiredTxAdvicePersistence" transaction-manager="defaultTransactionManager">
        <!-- the transactional semantics... -->
        <tx:attributes>
            <!-- all methods starting with 'get' are read-only -->
            <tx:method name="select*" propagation="SUPPORTS"/>
            <!-- other methods use the default transaction settings (see below) -->
            <tx:method name="*"
                       rollback-for="java.lang.RuntimeException"
                       no-rollback-for="java.lang.Exception"
                       propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>
    <tx:advice id="requiredNewTxAdvicePersistence" transaction-manager="defaultTransactionManager">
        <!-- the transactional semantics... -->
        <tx:attributes>
            <!-- all methods starting with 'get' are read-only -->
            <tx:method name="select*" propagation="SUPPORTS"/>
            <!-- other methods use the default transaction settings (see below) -->
            <tx:method name="*"
                       rollback-for="java.lang.RuntimeException"
                       no-rollback-for="java.lang.Exception"
                       propagation="REQUIRES_NEW"/>
        </tx:attributes>
    </tx:advice>
    <tx:advice id="requiredTxAdvice" transaction-manager="defaultTransactionManager">
        <!-- the transactional semantics... -->
        <tx:attributes>
            <!-- all methods starting with 'get' are read-only -->
            <tx:method name="get*" propagation="SUPPORTS"/>
            <!-- other methods use the default transaction settings (see below) -->
            <tx:method name="*"
                       rollback-for="java.lang.RuntimeException"
                       no-rollback-for="java.lang.Exception"
                       propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>
    <tx:advice id="supportTxAdvice" transaction-manager="defaultTransactionManager">
        <!-- the transactional semantics... -->
        <tx:attributes>
            <!-- all methods starting with 'get' are read-only -->
            <tx:method name="get*" propagation="SUPPORTS"/>
            <!-- other methods use the default transaction settings (see below) -->
            <tx:method name="*"
                       rollback-for="java.lang.RuntimeException"
                       no-rollback-for="java.lang.Exception"
                       propagation="SUPPORTS"/>
        </tx:attributes>
    </tx:advice>
    <tx:advice id="notSupportTxAdvice" transaction-manager="defaultTransactionManager">
        <!-- the transactional semantics... -->
        <tx:attributes>
            <!-- all methods starting with 'get' are read-only -->
            <tx:method name="get*" propagation="SUPPORTS"/>
            <!-- other methods use the default transaction settings (see below) -->
            <tx:method name="*"
                       rollback-for="java.lang.RuntimeException"
                       no-rollback-for="java.lang.Exception"
                       propagation="NOT_SUPPORTED"/>
        </tx:attributes>
    </tx:advice>

    <tx:advice id="requiredTxAdviceSqlPersistence" transaction-manager="sqlTransactionManager">
        <!-- the transactional semantics... -->
        <tx:attributes>
            <!-- all methods starting with 'get' are read-only -->
            <tx:method name="select*" propagation="SUPPORTS"/>
            <!-- other methods use the default transaction settings (see below) -->
            <tx:method name="*"
                       rollback-for="java.lang.RuntimeException"
                       no-rollback-for="java.lang.Exception"
                       propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>
    <tx:advice id="requiredNewTxAdviceSqlPersistence" transaction-manager="sqlTransactionManager">
        <!-- the transactional semantics... -->
        <tx:attributes>
            <!-- all methods starting with 'get' are read-only -->
            <tx:method name="select*" propagation="SUPPORTS"/>
            <!-- other methods use the default transaction settings (see below) -->
            <tx:method name="*"
                       rollback-for="java.lang.RuntimeException"
                       no-rollback-for="java.lang.Exception"
                       propagation="REQUIRES_NEW"/>
        </tx:attributes>
    </tx:advice>
    <!-- ensure that the above transactional advice runs for any execution
      of an operation defined by the FooService interface -->
    <aop:config>
        <aop:pointcut id="persistenceOperation" expression="within(org.harryng.kotlin.demo..persistence.*)"/>
        <aop:pointcut id="serviceOperation"
                      expression="within(org.harryng.kotlin.demo..service.*) &amp;&amp; !@annotation(org.springframework.transaction.annotation.Transactional)"/>
        <aop:advisor pointcut-ref="persistenceOperation" advice-ref="requiredTxAdvicePersistence" order="0"/>
        <aop:advisor pointcut-ref="serviceOperation" advice-ref="supportTxAdvice" order="0"/>
    </aop:config>

</beans>
